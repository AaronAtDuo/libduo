Index: auth.h
===================================================================
RCS file: /cvs/openssh/auth.h,v
retrieving revision 1.90
diff -u -p -u -r1.90 auth.h
--- auth.h	2 Dec 2012 22:53:20 -0000	1.90
+++ auth.h	3 Mar 2013 22:48:04 -0000
@@ -157,8 +157,9 @@ void	userauth_send_banner(const char *);
 
 char	*auth2_read_banner(void);
 int	 auth2_methods_valid(const char *, int);
-int	 auth2_update_methods_lists(Authctxt *, const char *);
+int	 auth2_update_methods_lists(Authctxt *, const char *, const char *);
 int	 auth2_setup_methods_lists(Authctxt *);
+int	 auth2_method_allowed(Authctxt *, const char *, const char *);
 
 void	privsep_challenge_enable(void);
 
Index: auth2-chall.c
===================================================================
RCS file: /cvs/openssh/auth2-chall.c,v
retrieving revision 1.40
diff -u -p -u -r1.40 auth2-chall.c
--- auth2-chall.c	3 Dec 2012 00:25:31 -0000	1.40
+++ auth2-chall.c	3 Mar 2013 22:48:04 -0000
@@ -155,7 +155,7 @@ kbdint_free(KbdintAuthctxt *kbdintctxt)
 }
 /* get next device */
 static int
-kbdint_next_device(KbdintAuthctxt *kbdintctxt)
+kbdint_next_device(Authctxt *authctxt, KbdintAuthctxt *kbdintctxt)
 {
 	size_t len;
 	char *t;
@@ -169,9 +169,13 @@ kbdint_next_device(KbdintAuthctxt *kbdin
 
 		if (len == 0)
 			break;
-		for (i = 0; devices[i]; i++)
+		for (i = 0; devices[i]; i++) {
+			if (!auth2_method_allowed(authctxt,
+			    "keyboard-interactive", devices[i]->name))
+				continue;
 			if (strncmp(kbdintctxt->devices, devices[i]->name, len) == 0)
 				kbdintctxt->device = devices[i];
+		}
 		t = kbdintctxt->devices;
 		kbdintctxt->devices = t[len] ? xstrdup(t+len+1) : NULL;
 		xfree(t);
@@ -221,7 +225,7 @@ auth2_challenge_start(Authctxt *authctxt
 	debug2("auth2_challenge_start: devices %s",
 	    kbdintctxt->devices ?  kbdintctxt->devices : "<empty>");
 
-	if (kbdint_next_device(kbdintctxt) == 0) {
+	if (kbdint_next_device(authctxt, kbdintctxt) == 0) {
 		auth2_challenge_stop(authctxt);
 		return 0;
 	}
Index: auth2.c
===================================================================
RCS file: /cvs/openssh/auth2.c,v
retrieving revision 1.156
diff -u -p -u -r1.156 auth2.c
--- auth2.c	2 Dec 2012 22:53:20 -0000	1.156
+++ auth2.c	3 Mar 2013 22:48:05 -0000
@@ -98,8 +98,7 @@ static void input_userauth_request(int, 
 /* helper */
 static Authmethod *authmethod_lookup(Authctxt *, const char *);
 static char *authmethods_get(Authctxt *authctxt);
-static int method_allowed(Authctxt *, const char *);
-static int list_starts_with(const char *, const char *);
+static int list_starts_with(const char *, const char *, const char *);
 
 char *
 auth2_read_banner(void)
@@ -316,7 +315,7 @@ userauth_finish(Authctxt *authctxt, int 
 	}
 
 	if (authenticated && options.num_auth_methods != 0) {
-		if (!auth2_update_methods_lists(authctxt, method)) {
+		if (!auth2_update_methods_lists(authctxt, method, submethod)) {
 			authenticated = 0;
 			partial = 1;
 		}
@@ -387,8 +386,9 @@ userauth_finish(Authctxt *authctxt, int 
  * methods list. Returns 1 if allowed, or no methods lists configured.
  * 0 otherwise.
  */
-static int
-method_allowed(Authctxt *authctxt, const char *method)
+int
+auth2_method_allowed(Authctxt *authctxt, const char *method,
+    const char *submethod)
 {
 	u_int i;
 
@@ -399,7 +399,8 @@ method_allowed(Authctxt *authctxt, const
 	if (options.num_auth_methods == 0)
 		return 1;
 	for (i = 0; i < authctxt->num_auth_methods; i++) {
-		if (list_starts_with(authctxt->auth_methods[i], method))
+		if (list_starts_with(authctxt->auth_methods[i], method,
+		    submethod) != 0)
 			return 1;
 	}
 	return 0;
@@ -419,7 +420,8 @@ authmethods_get(Authctxt *authctxt)
 		if (authmethods[i]->enabled == NULL ||
 		    *(authmethods[i]->enabled) == 0)
 			continue;
-		if (!method_allowed(authctxt, authmethods[i]->name))
+		if (!auth2_method_allowed(authctxt, authmethods[i]->name,
+		    NULL))
 			continue;
 		if (buffer_len(&b) > 0)
 			buffer_append(&b, ",", 1);
@@ -442,7 +444,8 @@ authmethod_lookup(Authctxt *authctxt, co
 			if (authmethods[i]->enabled != NULL &&
 			    *(authmethods[i]->enabled) != 0 &&
 			    strcmp(name, authmethods[i]->name) == 0 &&
-			    method_allowed(authctxt, authmethods[i]->name))
+			    auth2_method_allowed(authctxt,
+			    authmethods[i]->name, NULL))
 				return authmethods[i];
 	debug2("Unrecognized authentication method name: %s",
 	    name ? name : "NULL");
@@ -457,7 +460,7 @@ authmethod_lookup(Authctxt *authctxt, co
 int
 auth2_methods_valid(const char *_methods, int need_enable)
 {
-	char *methods, *omethods, *method;
+	char *methods, *omethods, *method, *p;
 	u_int i, found;
 	int ret = -1;
 
@@ -468,6 +471,8 @@ auth2_methods_valid(const char *_methods
 	omethods = methods = xstrdup(_methods);
 	while ((method = strsep(&methods, ",")) != NULL) {
 		for (found = i = 0; !found && authmethods[i] != NULL; i++) {
+			if ((p = strchr(method, ':')) != NULL)
+				*p = '\0';
 			if (strcmp(method, authmethods[i]->name) != 0)
 				continue;
 			if (need_enable) {
@@ -532,14 +537,35 @@ auth2_setup_methods_lists(Authctxt *auth
 	return 0;
 }
 
+/*
+ * return 1 if both the method and optional submethod match.
+ * return 2 if method matches but the submethod cannot be checked
+ * (this is used for method lookup where the submethod is unknown).
+ * return 0 otherwise (on method or submethod mismatch).
+ */
 static int
-list_starts_with(const char *methods, const char *method)
+list_starts_with(const char *methods, const char *method,
+    const char *submethod)
 {
 	size_t l = strlen(method);
+	const char *p;
 
 	if (strncmp(methods, method, l) != 0)
 		return 0;
-	if (methods[l] != ',' && methods[l] != '\0')
+	p = methods + l;
+	if (*p == ':') {
+		if (!submethod)
+			return 2;
+		l = strlen(submethod);
+		p += 1;
+		if (strncmp(submethod, p, l))
+			return 0;
+		p += l;
+	} else {
+		if (submethod)
+			return 0;
+	}
+	if (*p != ',' && *p != '\0')
 		return 0;
 	return 1;
 }
@@ -550,14 +576,19 @@ list_starts_with(const char *methods, co
  * if it did.
  */
 static int
-remove_method(char **methods, const char *method)
+remove_method(char **methods, const char *method, const char *submethod)
 {
-	char *omethods = *methods;
+	char *omethods = *methods, *p;
 	size_t l = strlen(method);
 
-	if (!list_starts_with(omethods, method))
+	if (list_starts_with(omethods, method, submethod) != 1)
 		return 0;
-	*methods = xstrdup(omethods + l + (omethods[l] == ',' ? 1 : 0));
+	p = omethods + l;
+	if (submethod)
+		p += 1 + strlen(submethod); /* include colon */
+	if (*p == ',')
+		p++;
+	*methods = xstrdup(p);
 	free(omethods);
 	return 1;
 }
@@ -569,13 +600,15 @@ remove_method(char **methods, const char
  * Returns 1 if the method completed any authentication list or 0 otherwise.
  */
 int
-auth2_update_methods_lists(Authctxt *authctxt, const char *method)
+auth2_update_methods_lists(Authctxt *authctxt, const char *method,
+    const char *submethod)
 {
 	u_int i, found = 0;
 
 	debug3("%s: updating methods list after \"%s\"", __func__, method);
 	for (i = 0; i < authctxt->num_auth_methods; i++) {
-		if (!remove_method(&(authctxt->auth_methods[i]), method))
+		if (!remove_method(&(authctxt->auth_methods[i]), method,
+		    submethod))
 			continue;
 		found = 1;
 		if (*authctxt->auth_methods[i] == '\0') {
Index: monitor.c
===================================================================
RCS file: /cvs/openssh/monitor.c,v
retrieving revision 1.155
diff -u -p -u -r1.155 monitor.c
--- monitor.c	11 Dec 2012 23:44:39 -0000	1.155
+++ monitor.c	3 Mar 2013 22:48:05 -0000
@@ -392,7 +392,7 @@ monitor_child_preauth(Authctxt *_authctx
 				    "with SSH protocol 1");
 			if (authenticated &&
 			    !auth2_update_methods_lists(authctxt,
-			    auth_method)) {
+			    auth_method, auth_submethod)) {
 				debug3("%s: method %s: partial", __func__,
 				    auth_method);
 				authenticated = 0;
@@ -947,9 +947,10 @@ mm_answer_bsdauthrespond(int sock, Buffe
 	debug3("%s: sending authenticated: %d", __func__, authok);
 	mm_request_send(sock, MONITOR_ANS_BSDAUTHRESPOND, m);
 
-	if (compat20)
-		auth_method = "keyboard-interactive"; /* XXX auth_submethod */
-	else
+	if (compat20) {
+		auth_method = "keyboard-interactive";
+		auth_submethod = "bsdauth";
+	} else
 		auth_method = "bsdauth";
 
 	return (authok != 0);
