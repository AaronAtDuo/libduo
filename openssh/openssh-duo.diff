Index: Makefile.in
===================================================================
RCS file: /cvs/openssh/Makefile.in,v
retrieving revision 1.336
diff -u -r1.336 Makefile.in
--- Makefile.in	7 Mar 2013 15:37:13 -0000	1.336
+++ Makefile.in	10 Mar 2013 20:08:58 -0000
@@ -80,6 +80,7 @@
 	roaming_common.o roaming_client.o
 
 SSHDOBJS=sshd.o auth-rhosts.o auth-passwd.o auth-rsa.o auth-rh-rsa.o \
+	auth2-duo.o \
 	audit.o audit-bsm.o audit-linux.o platform.o \
 	sshpty.o sshlogin.o servconf.o serverloop.o \
 	auth.o auth1.o auth2.o auth-options.o session.o \
Index: auth.h
===================================================================
RCS file: /cvs/openssh/auth.h,v
retrieving revision 1.90
diff -u -r1.90 auth.h
--- auth.h	2 Dec 2012 22:53:20 -0000	1.90
+++ auth.h	10 Mar 2013 20:08:58 -0000
@@ -64,6 +64,9 @@
 #ifdef BSD_AUTH
 	auth_session_t	*as;
 #endif
+#ifdef DUO
+        void            *duo_ctx;
+#endif
 	char		**auth_methods;	/* modified from server config */
 	u_int		 num_auth_methods;
 #ifdef KRB5
Index: auth2-chall.c
===================================================================
RCS file: /cvs/openssh/auth2-chall.c,v
retrieving revision 1.40
diff -u -r1.40 auth2-chall.c
--- auth2-chall.c	3 Dec 2012 00:25:31 -0000	1.40
+++ auth2-chall.c	10 Mar 2013 20:08:58 -0000
@@ -56,6 +56,9 @@
 #ifdef USE_PAM
 extern KbdintDevice sshpam_device;
 #endif
+#ifdef DUO
+extern KbdintDevice duo_device;
+#endif
 #ifdef SKEY
 extern KbdintDevice skey_device;
 #endif
@@ -68,6 +71,9 @@
 #ifdef USE_PAM
 	&sshpam_device,
 #endif
+#ifdef DUO
+        &duo_device,
+#endif
 #ifdef SKEY
 	&skey_device,
 #endif
@@ -347,7 +353,7 @@
 void
 privsep_challenge_enable(void)
 {
-#if defined(BSD_AUTH) || defined(USE_PAM) || defined(SKEY)
+#if defined(BSD_AUTH) || defined(USE_PAM) || defined(DUO) || defined(SKEY)
 	int n = 0;
 #endif
 #ifdef BSD_AUTH
@@ -356,6 +362,9 @@
 #ifdef USE_PAM
 	extern KbdintDevice mm_sshpam_device;
 #endif
+#ifdef DUO
+        extern KbdintDevice mm_duo_device;
+#endif
 #ifdef SKEY
 	extern KbdintDevice mm_skey_device;
 #endif
@@ -365,6 +374,9 @@
 #else
 #ifdef USE_PAM
 	devices[n++] = &mm_sshpam_device;
+#endif
+#ifdef DUO
+        devices[n++] = &mm_duo_device;
 #endif
 #ifdef SKEY
 	devices[n++] = &mm_skey_device;
Index: auth2-duo.c
===================================================================
RCS file: auth2-duo.c
diff -N auth2-duo.c
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ auth2-duo.c	10 Mar 2013 20:08:59 -0000
@@ -0,0 +1,259 @@
+/*
+ * auth2-duo.c
+ *
+ * Copyright (c) 2013 Duo Security
+ * All rights reserved, all wrongs reversed.
+ */
+
+#include "includes.h"
+
+#ifdef DUO
+
+#include "xmalloc.h"
+#include "key.h"
+#include "hostfile.h"
+#include "auth.h"
+#include "log.h"
+#include "buffer.h"
+#include "canohost.h"
+#include "version.h"
+#include "monitor_wrap.h"
+
+#include "duo.h"
+
+/*
+  XXX - use /etc/duo/sshd.conf in the future? For now, override
+  DUO_APIHOST, DUO_IKEY, DUO_SKEY, etc. at configuration time with:
+
+  CFLAGS='-DDUO_APIHOST=\"foohost\" -DDUO_IKEY=\"SI3656...\"' ./configure
+*/
+#ifndef DUO_APIHOST
+  #define DUO_APIHOST	"api-XXX.duosecurity.com"
+#endif
+#ifndef DUO_IKEY
+  #define DUO_IKEY	"..."
+#endif
+#ifndef DUO_SKEY
+  #define DUO_SKEY	"..."
+#endif
+#ifndef DUO_PROXY
+  #define DUO_PROXY	NULL	/* as in http_proxy var, with optional auth */
+#endif
+#ifndef DUO_FAILOPEN
+  #define DUO_FAILOPEN	1	/* or 0 to fail secure */
+#endif
+
+typedef enum {
+        DUO_CTX_INIT,
+        DUO_CTX_ENROLL,
+        DUO_CTX_AUTH,
+        DUO_CTX_DENY,
+        DUO_CTX_FAILSAFE,
+        DUO_CTX_ALLOW,
+} _duo_state_t;
+
+struct _duo_ctx {
+        duo_t	        *duo;
+        _duo_state_t     state;
+        struct duo_auth *auth;
+};
+
+/*
+ * Keyboard interactive device:
+ * init_ctx    returns: non NULL upon success
+ * query       returns: 0 - success, otherwise failure
+ * respond     returns: 0 - success, 1 - need further interaction,
+ *             otherwise - failure
+ */
+
+static void *
+_duo_init_ctx(Authctxt *authctxt)
+{
+        struct _duo_ctx *ctx = (struct _duo_ctx *)(authctxt->duo_ctx);
+        
+        if (ctx == NULL) {
+                if ((ctx = calloc(1, sizeof(*ctx))) == NULL ||
+                    (ctx->duo = duo_init(DUO_APIHOST, DUO_IKEY, DUO_SKEY,
+                        SSH_RELEASE, NULL, DUO_PROXY)) == NULL) {
+                        free(ctx);
+                        return (NULL);
+                }
+                authctxt->duo_ctx = ctx;
+        }
+        return (authctxt);
+}
+
+/*
+  XXX - no way to do kbdint without interaction - e.g. no autopush
+  --> Enter "push", "call", "sms", passcode, or none for first OOB:
+  --> Hit return to push/call, or enter passcode: 
+  --> Duo passcode (or none to push/call): 
+*/
+
+static int
+_duo_query(void *_authctxt, char **name, char **info,
+   u_int *numprompts, char ***prompts, u_int **echo_on)
+{
+        Authctxt *authctxt = (Authctxt *)_authctxt;
+        struct _duo_ctx *ctx = (struct _duo_ctx *)(authctxt->duo_ctx);
+        duocode_t code;
+        int ret;
+        
+        debug2("_duo_query entering: ctx %p state %d", ctx, ctx->state);
+        
+        if (ctx == NULL) {
+                fatal("_duo_query: Missing Duo context");
+        }
+        if (!authctxt->valid) {
+                error("Refused Duo login for %s: Invalid user",
+                    authctxt->user);
+                return (-1);
+        }
+        if (ctx->state == DUO_CTX_ENROLL) {
+                /* Present one enrollment URL per session */
+                fatal("Enrollment URL presented to %s", authctxt->user);
+        }
+        *name = xstrdup("");
+        *prompts = xcalloc(1, sizeof(char *));
+        *numprompts = 0;
+        *echo_on = xcalloc(1, sizeof(u_int));
+        (*echo_on)[0] = 1;
+        
+        ctx->auth = duo_auth_preauth(ctx->duo, authctxt->user);
+        debug3("duo_auth_preauth() returns %s: %s",
+            duo_get_error(ctx->duo), duo_get_response(ctx->duo));
+
+        /* Return non-zero on failed login query */
+        ret = 0;
+        
+        if (ctx->auth == NULL) {
+                code = duo_get_code(ctx->duo);
+                if (DUO_FAILOPEN &&
+                    (code == DUO_CONN_ERROR ||
+                     code == DUO_CLIENT_ERROR || code == DUO_SERVER_ERROR)) {
+                        ctx->state = DUO_CTX_FAILSAFE;
+                        *info = xstrdup("Skipping Duo login on service error");
+                } else {
+                        xfree(*name);
+                        xfree(*prompts);
+                        xfree(*echo_on);
+                        error("Aborted Duo login for %s on error: %s",
+                            authctxt->user, duo_get_error(ctx->duo));
+                        ret = -1;
+                }
+        } else if (strcmp(ctx->auth->ok.preauth.result, "auth") == 0) {
+                ctx->state = DUO_CTX_AUTH;
+                *info = xstrdup("");
+                *numprompts = 1;
+                (*prompts)[0] = xstrdup(ctx->auth->ok.preauth.prompt.text);
+        } else if (strcmp(ctx->auth->ok.preauth.result, "enroll") == 0) {
+                ctx->state = DUO_CTX_ENROLL;
+                *info = xstrdup(ctx->auth->ok.preauth.prompt.text);
+                *numprompts = 1;
+                (*prompts)[0] = xstrdup("");
+        } else if (strcmp(ctx->auth->ok.preauth.result, "allow") == 0) {
+                ctx->state = DUO_CTX_ALLOW;
+                *info = xstrdup(ctx->auth->ok.preauth.status_msg);
+        } else if (strcmp(ctx->auth->ok.preauth.result, "deny") == 0){
+                ctx->state = DUO_CTX_DENY;
+                *info = xstrdup(ctx->auth->ok.preauth.status_msg);
+        } else {
+                error("_duo_query: Error parsing /preauth response");
+                ctx->auth = duo_auth_free(ctx->auth);
+                ret = -1;
+        }
+	return (ret);
+}
+
+static int
+_duo_respond(void *_authctxt, u_int numresponses, char **responses)
+{
+        Authctxt *authctxt = (Authctxt *)_authctxt;
+        struct _duo_ctx *ctx = (struct _duo_ctx *)(authctxt->duo_ctx);
+        struct duo_auth *auth;
+        struct duo_factor *fac;
+        const char *factor_arg;
+        int i, ret;
+
+        debug2("_duo_respond entering: ctx %p state %d", ctx, ctx->state);
+
+        /* Return 0 on authentication success */
+        ret = -1;
+        
+        if (ctx->state == DUO_CTX_ENROLL) {
+                logit("Rejected Duo login for %s: Enrollment required",
+                    authctxt->user);
+        } else if (ctx->state == DUO_CTX_DENY) {
+                logit("Denied Duo login for %s: %s",
+                    authctxt->user, ctx->auth->ok.preauth.status_msg);
+        } else if (ctx->state == DUO_CTX_FAILSAFE) {
+                error("Failsafe Duo login for %s: %s",
+                    authctxt->user, duo_get_error(ctx->duo));
+                ret = 0;
+        } else if (ctx->state == DUO_CTX_ALLOW) {
+                logit("Skipped Duo login for %s: %s",
+                    authctxt->user, ctx->auth->ok.preauth.status_msg);
+                ret = 0;
+        } else if (ctx->state == DUO_CTX_AUTH && numresponses == 1) {
+                /* Determine user selection, or default if empty */
+                factor_arg = *responses[0] ? responses[0] : "default";
+                
+                for (i=0; i < ctx->auth->ok.preauth.prompt.factors_cnt; i++) {
+                        fac = &ctx->auth->ok.preauth.prompt.factors[i];
+                        if (strcmp(factor_arg, fac->option) == 0) {
+                                factor_arg = fac->label;
+                        }
+                }
+                /* Try Duo login */
+                auth = duo_auth_auth(ctx->duo, authctxt->user, "prompt",
+                    get_remote_ipaddr(), factor_arg);
+                debug3("duo_auth_auth() returns %s: %s",
+                    duo_get_error(ctx->duo), duo_get_response(ctx->duo));
+                
+                if (strcmp(auth->ok.auth.result, "allow") == 0) {
+                        logit("Successful Duo login for %s via %s",
+                            authctxt->user, (factor_arg == responses[0]) ?
+                            "passcode" : factor_arg);
+                        /* Cleanup Duo handle and return success */
+                        duo_close(ctx->duo);
+                        ret = 0;
+                } else if (strcmp(auth->ok.auth.result, "deny") == 0) {
+                        logit("Failed Duo login for %s via %s: [%s] %s",
+                            authctxt->user, (factor_arg == responses[0]) ?
+                            "passcode" : factor_arg,
+                            auth->ok.auth.status, auth->ok.auth.status_msg);
+                } else {
+                        error("_duo_respond: Error parsing /auth response");
+                }
+                debug3("cleanup ctx->auth %p", ctx->auth);
+                ctx->auth = duo_auth_free(ctx->auth);
+                auth = duo_auth_free(auth);
+        } else {
+                error("_duo_respond: Bad state or user response to prompt");
+        }
+        return (ret);
+}
+
+static void
+_duo_free_ctx(void *_authctxt)
+{
+        /* Persist Duo handle between attempts for connection pooling... */
+}
+
+KbdintDevice duo_device = {
+	"duo",
+	_duo_init_ctx,
+	_duo_query,
+	_duo_respond,
+	_duo_free_ctx
+};
+
+KbdintDevice mm_duo_device = {
+	"duo",
+	mm_duo_init_ctx,
+	mm_duo_query,
+	mm_duo_respond,
+	_duo_free_ctx
+};
+
+#endif /* DUO */
Index: configure.ac
===================================================================
RCS file: /cvs/openssh/configure.ac,v
retrieving revision 1.513
diff -u -r1.513 configure.ac
--- configure.ac	8 Mar 2013 01:14:23 -0000	1.513
+++ configure.ac	10 Mar 2013 20:09:00 -0000
@@ -3648,6 +3648,60 @@
 AC_SUBST([SSHLIBS])
 AC_SUBST([SSHDLIBS])
 
+# Check whether user wants Duo Security support
+DUO_MSG="no"
+AC_ARG_WITH([duo],
+	[  --with-duo[[=PATH]]       Enable Duo Security support],
+	[
+		if test "x$withval" != "xno" ; then
+			saved_LIBS="$LIBS"
+			saved_LDFLAGS="$LDFLAGS"
+			saved_CPPFLAGS="$CPPFLAGS"
+			if test -n "${withval}" && \
+			    test "x${withval}" != "xyes"; then
+				if test -d "${withval}/lib"; then
+					if test -n "${need_dash_r}"; then
+						LDFLAGS="-L${withval}/lib -R${withval}/lib ${LDFLAGS}"
+					else
+						LDFLAGS="-L${withval}/lib ${LDFLAGS}"
+					fi
+				else
+					if test -n "${need_dash_r}"; then
+						LDFLAGS="-L${withval} -R${withval} ${LDFLAGS}"
+					else
+						LDFLAGS="-L${withval} ${LDFLAGS}"
+					fi
+				fi
+				if test -d "${withval}/include"; then
+					CPPFLAGS="-I${withval}/include ${CPPFLAGS}"
+				else
+					CPPFLAGS="-I${withval} ${CPPFLAGS}"
+				fi
+			fi
+			LIBS="-lduo -lssl $LIBS"
+			AC_MSG_CHECKING([for libduo])
+			AC_LINK_IFELSE([AC_LANG_PROGRAM([[
+#include <stdio.h>
+#include <duo.h>
+duo_t *duo = NULL;
+				]], [[
+	duo_close(duo);
+				]])], [
+					AC_MSG_RESULT([yes])
+					AC_DEFINE([DUO], [1],
+						[Define if you want
+						Duo Security support])
+					SSHDLIBS="$SSHDLIBS -lduo -lssl"
+					DUO_MSG="yes"
+				], [
+					AC_MSG_ERROR([*** libduo missing])
+				
+			])
+			LIBS="$saved_LIBS"
+		fi
+	]
+)
+
 # Check whether user wants Kerberos 5 support
 KRB5_MSG="no"
 AC_ARG_WITH([kerberos5],
@@ -4529,6 +4583,7 @@
 echo "                 KerberosV support: $KRB5_MSG"
 echo "                   SELinux support: $SELINUX_MSG"
 echo "                 Smartcard support: $SCARD_MSG"
+echo "              Duo Security support: $DUO_MSG"
 echo "                     S/KEY support: $SKEY_MSG"
 echo "              TCP Wrappers support: $TCPW_MSG"
 echo "              MD5 password support: $MD5_MSG"
Index: monitor.c
===================================================================
RCS file: /cvs/openssh/monitor.c,v
retrieving revision 1.155
diff -u -r1.155 monitor.c
--- monitor.c	11 Dec 2012 23:44:39 -0000	1.155
+++ monitor.c	10 Mar 2013 20:09:01 -0000
@@ -175,6 +175,12 @@
 int mm_answer_pam_free_ctx(int, Buffer *);
 #endif
 
+#ifdef DUO
+int mm_answer_duo_init_ctx(int, Buffer *);
+int mm_answer_duo_query(int, Buffer *);
+int mm_answer_duo_respond(int, Buffer *);
+#endif
+
 #ifdef GSSAPI
 int mm_answer_gss_setup_ctx(int, Buffer *);
 int mm_answer_gss_accept_ctx(int, Buffer *);
@@ -241,6 +247,11 @@
     {MONITOR_REQ_BSDAUTHQUERY, MON_ISAUTH, mm_answer_bsdauthquery},
     {MONITOR_REQ_BSDAUTHRESPOND, MON_AUTH, mm_answer_bsdauthrespond},
 #endif
+#ifdef DUO
+    {MONITOR_REQ_DUO_INIT_CTX, MON_ISAUTH, mm_answer_duo_init_ctx},
+    {MONITOR_REQ_DUO_QUERY, MON_ISAUTH, mm_answer_duo_query},
+    {MONITOR_REQ_DUO_RESPOND, MON_AUTH, mm_answer_duo_respond},
+#endif
 #ifdef SKEY
     {MONITOR_REQ_SKEYQUERY, MON_ISAUTH, mm_answer_skeyquery},
     {MONITOR_REQ_SKEYRESPOND, MON_AUTH, mm_answer_skeyrespond},
@@ -955,6 +966,97 @@
 	return (authok != 0);
 }
 #endif
+
+#ifdef DUO
+extern KbdintDevice duo_device;
+
+int
+mm_answer_duo_init_ctx(int sock, Buffer *m)
+{
+        u_int success;
+
+        debug3("%s entering", __func__);
+        
+        success = (duo_device.init_ctx)(authctxt) == NULL ? 0 : 1;
+        
+        buffer_clear(m);
+        buffer_put_int(m, success);
+        
+        auth_method = "keyboard-interactive";
+        auth_submethod = "duo";
+        
+        mm_request_send(sock, MONITOR_ANS_DUO_INIT_CTX, m);
+        
+        return (0);
+}
+
+int
+mm_answer_duo_query(int sock, Buffer *m)
+{
+	char *name, *infotxt;
+	u_int i, numprompts;
+	u_int *echo_on;
+	char **prompts;
+	u_int success;
+
+	success = ((duo_device.query)(authctxt, &name, &infotxt, &numprompts,
+                &prompts, &echo_on) == 0);
+
+        /* Send status, info, numprompts, prompts (if any) */
+	buffer_clear(m);
+	buffer_put_int(m, success);
+	if (success) {
+                buffer_put_cstring(m, infotxt);
+                buffer_put_int(m, numprompts);
+                if (numprompts > 0) {
+                        buffer_put_cstring(m, prompts[0]);
+                }
+        }
+	debug3("%s: sending challenge success: %u", __func__, success);
+	mm_request_send(sock, MONITOR_ANS_DUO_QUERY, m);
+
+        auth_method = "keyboard-interactive";
+        auth_submethod = "duo";
+        
+	if (success) {
+		xfree(name);
+		xfree(infotxt);
+                for (i = 0; i < numprompts; i++) {
+                        xfree(prompts[i]);
+                }
+                xfree(prompts);
+		xfree(echo_on);
+	}
+	return (0);
+}
+
+int
+mm_answer_duo_respond(int sock, Buffer *m)
+{
+        char **responses;
+        int authok;
+        u_int len;
+
+        responses = xmalloc(sizeof(*responses));
+        responses[0] = buffer_get_string(m, &len);
+
+        authok = (duo_device.respond)(authctxt, 1, responses);
+
+        memset(responses[0], 0, len);
+        xfree(responses[0]);
+        xfree(responses);
+
+        buffer_clear(m);
+        buffer_put_int(m, authok);
+        mm_request_send(sock, MONITOR_ANS_DUO_RESPOND, m);
+        
+        auth_method = "keyboard-interactive";
+        auth_submethod = "duo";
+        
+        return (authok == 0);
+}
+
+#endif /* DUO */
 
 #ifdef SKEY
 int
Index: monitor.h
===================================================================
RCS file: /cvs/openssh/monitor.h,v
retrieving revision 1.24
diff -u -r1.24 monitor.h
--- monitor.h	2 Dec 2012 22:53:21 -0000	1.24
+++ monitor.h	10 Mar 2013 20:09:01 -0000
@@ -70,6 +70,10 @@
 	MONITOR_REQ_PAM_FREE_CTX = 110, MONITOR_ANS_PAM_FREE_CTX = 111,
 	MONITOR_REQ_AUDIT_EVENT = 112, MONITOR_REQ_AUDIT_COMMAND = 113,
 
+        MONITOR_REQ_DUO_INIT_CTX = 114, MONITOR_ANS_DUO_INIT_CTX = 115,
+        MONITOR_REQ_DUO_QUERY = 116, MONITOR_ANS_DUO_QUERY = 117,
+        MONITOR_REQ_DUO_RESPOND = 118, MONITOR_ANS_DUO_RESPOND = 119,
+        
 };
 
 struct mm_master;
Index: monitor_wrap.c
===================================================================
RCS file: /cvs/openssh/monitor_wrap.c,v
retrieving revision 1.91
diff -u -r1.91 monitor_wrap.c
--- monitor_wrap.c	9 Jan 2013 05:12:19 -0000	1.91
+++ monitor_wrap.c	10 Mar 2013 20:09:02 -0000
@@ -1001,6 +1001,81 @@
 	return ((authok == 0) ? -1 : 0);
 }
 
+#ifdef DUO
+void *
+mm_duo_init_ctx(Authctxt *authctxt)
+{
+	Buffer m;
+	u_int success;
+
+	debug3("%s", __func__);
+	buffer_init(&m);
+	mm_request_send(pmonitor->m_recvfd, MONITOR_REQ_DUO_INIT_CTX, &m);
+	debug3("%s: waiting for MONITOR_ANS_DUO_INIT_CTX", __func__);
+	mm_request_receive_expect(pmonitor->m_recvfd, MONITOR_ANS_DUO_INIT_CTX,
+            &m);
+	success = buffer_get_int(&m);
+        buffer_free(&m);
+
+        return ((success == 0) ? NULL : authctxt);
+}
+
+int
+mm_duo_query(void *ctx, char **name, char **info,
+    u_int *num, char ***prompts, u_int **echo_on)
+{
+	Buffer m;
+	u_int success;
+        int ret = -1;
+        
+	debug3("%s: entering", __func__);
+
+	buffer_init(&m);
+	mm_request_send(pmonitor->m_recvfd, MONITOR_REQ_DUO_QUERY, &m);
+	mm_request_receive_expect(pmonitor->m_recvfd, MONITOR_ANS_DUO_QUERY,
+            &m);
+        
+        /* Receive status, info, numprompts, prompts (if any) */
+	if ((success = buffer_get_int(&m)) == 1) {
+                *name = xstrdup("");
+                *info = buffer_get_string(&m, NULL);
+                *num = buffer_get_int(&m);
+                *prompts = xcalloc(1, sizeof(char *));
+                if (*num) {
+                        (*prompts)[0] = buffer_get_string(&m, NULL);
+                }
+                *echo_on = xcalloc(1, sizeof(u_int));
+                (*echo_on)[0] = 1;
+                ret = 0;
+        }
+        buffer_free(&m);
+        
+	return (ret);
+}
+
+int
+mm_duo_respond(void *ctx, u_int num, char **responses)
+{
+	Buffer m;
+        int authok;
+        
+        debug3("%s: entering", __func__);
+        if (num != 1)
+                return (-1);
+
+        buffer_init(&m);
+        buffer_put_cstring(&m, responses[0]);
+        mm_request_send(pmonitor->m_recvfd, MONITOR_REQ_DUO_RESPOND, &m);
+        debug3("%s: waiting for MONITOR_ANS_DUO_RESPOND", __func__);
+        mm_request_receive_expect(pmonitor->m_recvfd, MONITOR_ANS_DUO_RESPOND,
+            &m);
+        authok = buffer_get_int(&m);
+        buffer_free(&m);
+        return (authok);
+}
+
+#endif
+
 #ifdef SKEY
 int
 mm_skey_query(void *ctx, char **name, char **infotxt,
Index: monitor_wrap.h
===================================================================
RCS file: /cvs/openssh/monitor_wrap.h,v
retrieving revision 1.30
diff -u -r1.30 monitor_wrap.h
--- monitor_wrap.h	20 Jun 2011 04:42:23 -0000	1.30
+++ monitor_wrap.h	10 Mar 2013 20:09:02 -0000
@@ -98,6 +98,13 @@
 int mm_bsdauth_query(void *, char **, char **, u_int *, char ***, u_int **);
 int mm_bsdauth_respond(void *, u_int, char **);
 
+#ifdef DUO
+/* duo */
+void *mm_duo_init_ctx(struct Authctxt *);
+int mm_duo_query(void *, char **, char **, u_int *, char ***, u_int **);
+int mm_duo_respond(void *, u_int, char **);
+#endif
+
 /* skey */
 int mm_skey_query(void *, char **, char **, u_int *, char ***, u_int **);
 int mm_skey_respond(void *, u_int, char **);
